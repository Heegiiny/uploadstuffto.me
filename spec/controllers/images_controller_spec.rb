require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ImagesController do
  before(:each) do
    @user = Invite.create(:description => 'images controller test')
      .users
      .create(:email => 'hello@world.com',
        :password => 'pancakecrystal',
        :username => SecureRandom.hex)
    sign_in @user

    controller.stub :current_user => @user
  end

  after(:each) do
    logout(:user)
    Warden.test_reset!
  end

  # This should return the minimal set of attributes required to create a valid
  # Image. As you add validations to Image, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {
    :user_id => 1,
    :file => fixture_file_upload('chicken_rice.jpg')
  } }

  let(:multi_image_post) { {
    :user_id => 1,
    :file => [fixture_file_upload('chicken_rice.jpg')]
  } }

  let(:invalid_attributes) { {
    :user_id => 2,
    :description => 'wolol',
    :file => fixture_file_upload('chicken_rice.jpg')
  } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ImagesController. Be sure to keep this updated too.
  let(:valid_session) { { 'warden.user.user.key' => session['warden.user.user.key'] } }

  describe "GET new" do
    it "assigns a new image as @image" do
      #pending 'Leave this here until we figure out where to put /new'
      #this_should_not_get_executed
      #get :new, {}, valid_session
      #assigns(:image).should be_a_new(Image)
    end
  end

  describe "GET edit" do
    it "assigns the requested image as @image" do
      image = Image.create! valid_attributes
      get :edit, {:key => image.to_param}, valid_session
      assigns(:image).should eq(image)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Image" do
        expect {
          post :create, {:image => multi_image_post}, valid_session
        }.to change(Image, :count).by(1)
      end

      it "assigns a newly created image as @image" do
        post :create, {:image => multi_image_post}, valid_session
        assigns(:image).should be_a(Image)
        assigns(:image).should be_persisted
      end

      it "redirects to the created image" do
        post :create, {:image => multi_image_post}, valid_session
        response.should redirect_to(Image.last)
      end
    end

    describe "with invalid params" do
      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Image.any_instance.stub(:save).and_return(false)
        post :create, {:image => {  }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested image" do
        image = Image.create! valid_attributes
        # Assuming there are no other images in the database, this
        # specifies that the Image created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Image.any_instance.should_receive(:update).with({ "file" => "params" })
        put :update, {:key => image.to_param, :image => { "file" => "params" }}, valid_session
      end

      it "assigns the requested image as @image" do
        image = Image.create! valid_attributes
        put :update, {:key => image.to_param, :image => valid_attributes}, valid_session
        assigns(:image).should eq(image)
      end

      it "redirects to the image" do
        image = Image.create! valid_attributes
        put :update, {:key => image.to_param, :image => valid_attributes}, valid_session
        response.should redirect_to(image)
      end
    end

    describe "with invalid params" do
      it "assigns the image as @image" do
        image = Image.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Image.any_instance.stub(:save).and_return(false)
        put :update, {:key => image.to_param, :image => {  }}, valid_session
        assigns(:image).should eq(image)
      end

      it "re-renders the 'edit' template" do
        image = Image.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Image.any_instance.stub(:save).and_return(false)
        put :update, {:key => image.to_param, :image => {  }}, valid_session
        response.should render_template("edit")
      end

      it 'will not update anything when signed out' do
        sign_out @user
        image = Image.create! valid_attributes
        valid_attributes[:description] = 'This should not save'
        put :update, {:key => image.to_param, :image => valid_attributes}, valid_session

        image.reload
        image.description.should_not eq(valid_attributes[:description])
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested image" do
      image = Image.create! valid_attributes
      expect {
        delete :destroy, {:key => image.to_param}, valid_session
      }.to change(Image, :count).by(-1)
    end

    it "redirects to the images list" do
      image = Image.create! valid_attributes
      delete :destroy, {:key => image.to_param}, valid_session
      response.should redirect_to(images_url)
    end
  end
end
